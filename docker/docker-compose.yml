version: '3.8'

services:
  rag-prep-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rag-prep-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ENVIRONMENT=production
    volumes:
      - ../documents:/app/documents:ro
      - ../output:/app/output
      - ../temp:/app/temp
      - ../vector_db:/app/vector_db
      - ../logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-prep-network

  rag-prep-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rag-prep-worker
    command: ["python", "-m", "src.worker"]
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ENVIRONMENT=production
      - WORKER_MODE=true
    volumes:
      - ../documents:/app/documents:ro
      - ../output:/app/output
      - ../temp:/app/temp
      - ../vector_db:/app/vector_db
      - ../logs:/app/logs
    restart: unless-stopped
    depends_on:
      - rag-prep-api
    networks:
      - rag-prep-network

  # Optional: Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    container_name: rag-prep-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - rag-prep-network

  # Optional: PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: rag-prep-postgres
    environment:
      - POSTGRES_DB=ragprep
      - POSTGRES_USER=ragprep
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ragprep123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - rag-prep-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: rag-prep-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - rag-prep-api
    restart: unless-stopped
    networks:
      - rag-prep-network

volumes:
  redis_data:
  postgres_data:

networks:
  rag-prep-network:
    driver: bridge
