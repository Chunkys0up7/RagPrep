name: RAG Document Processing Pipeline

on:
  push:
    paths: ['documents/**', 'config/**', 'src/**']
  pull_request:
    paths: ['documents/**', 'config/**', 'src/**']
  workflow_dispatch:
    inputs:
      document_path:
        description: 'Path to document to process'
        required: false
        default: 'documents/'
      force_processing:
        description: 'Force reprocessing of all documents'
        required: false
        default: false

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  document-processing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            tesseract-ocr \
            tesseract-ocr-eng \
            poppler-utils \
            libmagic1
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock
      
      - name: Set up environment
        run: |
          cp env.example .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}" >> .env
          echo "WEAVIATE_API_KEY=${{ secrets.WEAVIATE_API_KEY }}" >> .env
          echo "WEAVIATE_URL=${{ secrets.WEAVIATE_URL }}" >> .env
          echo "TEST_MODE=true" >> .env
          echo "DEBUG_MODE=true" >> .env
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Process documents
        run: |
          python scripts/batch_process.py --input-dir documents/ --output-dir output/
      
      - name: Validate quality
        run: |
          python scripts/validate_quality.py --input-dir output/ --threshold 0.85
      
      - name: Update vector database
        if: success()
        run: |
          python scripts/update_vector_db.py --input-dir output/
      
      - name: Generate processing report
        if: always()
        run: |
          python scripts/generate_report.py --input-dir output/ --output-file processing_report.html
      
      - name: Upload processing results
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: processing-results-${{ matrix.python-version }}
          path: |
            output/
            processing_report.html
            .coverage
            htmlcov/
      
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality-validation:
    runs-on: ubuntu-latest
    needs: document-processing
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download processing results
        uses: actions/download-artifact@v3
        with:
          name: processing-results-3.9
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Run quality validation
        run: |
          python scripts/quality_validation.py --input-dir output/ --report-file quality_report.md
      
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality_report.md

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: document-processing
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download processing results
        uses: actions/download-artifact@v3
        with:
          name: processing-results-3.9
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Generate performance metrics
        run: |
          python scripts/performance_analysis.py --input-dir output/ --output-file performance_metrics.json
      
      - name: Upload performance metrics
        uses: actions/upload-artifact@v3
        with:
          name: performance-metrics
          path: performance_metrics.json

  notification:
    runs-on: ubuntu-latest
    needs: [document-processing, quality-validation, performance-monitoring]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          name: quality-report
      
      - name: Send notification
        run: |
          echo "Processing pipeline completed"
          echo "Quality validation: ${{ needs.quality-validation.result }}"
          echo "Performance monitoring: ${{ needs.performance-monitoring.result }}"
          
          # Here you could add Slack, email, or other notification methods
          # For example, using curl to send to a webhook
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Document processing pipeline completed"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
