#!/usr/bin/env python3
"""
🎯 Example: Custom MkDocs Site Configuration

This example demonstrates how to customize the generated MkDocs site
with custom themes, plugins, and configuration options.
"""

import sys
import yaml
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from src.processor import DocumentProcessor
from src.config import Config


def create_custom_mkdocs_config(mkdocs_dir: Path):
    """Create a custom MkDocs configuration with advanced features."""
    
    config = {
        'site_name': 'Custom Documentation Portal',
        'site_description': 'Advanced documentation site generated by RAGPrep',
        'site_author': 'RAGPrep Document Processor',
        'site_url': 'https://your-domain.com',
        
        'theme': {
            'name': 'material',
            'palette': [
                {
                    'scheme': 'default',
                    'primary': 'deep purple',
                    'accent': 'purple',
                    'toggle': {
                        'icon': 'material/brightness-7',
                        'name': 'Switch to dark mode'
                    }
                },
                {
                    'scheme': 'slate',
                    'primary': 'deep purple',
                    'accent': 'purple',
                    'toggle': {
                        'icon': 'material/brightness-4',
                        'name': 'Switch to light mode'
                    }
                }
            ],
            'font': {
                'text': 'Roboto',
                'code': 'Roboto Mono'
            },
            'features': [
                'navigation.instant',
                'navigation.tracking',
                'navigation.tabs',
                'navigation.tabs.sticky',
                'navigation.sections',
                'navigation.expand',
                'navigation.indexes',
                'toc.integrate',
                'search.highlight',
                'search.share',
                'content.code.copy',
                'content.code.annotate'
            ],
            'icon': {
                'repo': 'fontawesome/brands/github'
            }
        },
        
        'plugins': [
            'search',
            {
                'minify': {
                    'minify_html': True,
                    'minify_js': True,
                    'minify_css': True,
                    'htmlmin_opts': {
                        'remove_comments': True
                    }
                }
            },
            {
                'git-revision-date-localized': {
                    'type': 'date'
                }
            }
        ],
        
        'markdown_extensions': [
            'admonition',
            'pymdownx.details',
            'pymdownx.superfences',
            'pymdownx.highlight',
            'pymdownx.inlinehilite',
            'pymdownx.snippets',
            'pymdownx.arithmatex',
            'pymdownx.betterem',
            'pymdownx.caret',
            'pymdownx.mark',
            'pymdownx.tilde',
            'pymdownx.keys',
            'pymdownx.emoji',
            'pymdownx.tabbed',
            'pymdownx.tasklist',
            'attr_list',
            'def_list',
            'footnotes',
            'meta',
            'toc'
        ],
        
        'extra': {
            'social': [
                {
                    'icon': 'fontawesome/brands/github',
                    'link': 'https://github.com/your-repo'
                },
                {
                    'icon': 'fontawesome/brands/twitter',
                    'link': 'https://twitter.com/your-handle'
                }
            ],
            'analytics': {
                'provider': 'google',
                'property': 'G-XXXXXXXXXX'
            }
        },
        
        'copyright': 'Copyright &copy; 2024 RAGPrep Documentation Portal'
    }
    
    # Write custom configuration
    config_file = mkdocs_dir / "mkdocs.yml"
    with open(config_file, 'w', encoding='utf-8') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
    
    print(f"✅ Custom MkDocs configuration written to {config_file}")
    return config


def add_custom_css(docs_dir: Path):
    """Add custom CSS styling to the site."""
    
    stylesheets_dir = docs_dir / "stylesheets"
    stylesheets_dir.mkdir(exist_ok=True)
    
    custom_css = """
/* Custom CSS for RAGPrep Documentation */

/* Brand colors */
:root {
  --ragprep-primary: #6366f1;
  --ragprep-secondary: #8b5cf6;
  --ragprep-accent: #06b6d4;
}

/* Custom header styling */
.md-header {
  background: linear-gradient(135deg, var(--ragprep-primary), var(--ragprep-secondary));
}

/* Custom navigation styling */
.md-nav__title {
  font-weight: 600;
}

/* Document type badges */
.document-type-badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.75em;
  font-weight: 600;
  text-transform: uppercase;
  margin-right: 8px;
}

.document-type-original {
  background-color: var(--ragprep-primary);
  color: white;
}

.document-type-chunk {
  background-color: var(--ragprep-accent);
  color: white;
}

/* Quality score styling */
.quality-score {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 0.85em;
  font-weight: 500;
}

.quality-high { background-color: #dcfce7; color: #166534; }
.quality-medium { background-color: #fef3c7; color: #92400e; }
.quality-low { background-color: #fee2e2; color: #dc2626; }

/* Statistics styling */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin: 16px 0;
}

.stat-card {
  padding: 16px;
  background: var(--md-default-fg-color--lightest);
  border-radius: 8px;
  border-left: 4px solid var(--ragprep-primary);
}

.stat-value {
  font-size: 1.5em;
  font-weight: 600;
  color: var(--ragprep-primary);
}

.stat-label {
  font-size: 0.85em;
  opacity: 0.8;
  margin-top: 4px;
}

/* Enhanced code blocks */
.highlight {
  border-radius: 8px;
}

/* Custom admonition styles */
.md-typeset .admonition.ragprep {
  border-color: var(--ragprep-primary);
}

.md-typeset .admonition.ragprep > .admonition-title {
  background-color: var(--ragprep-primary);
  border-color: var(--ragprep-primary);
}

/* Navigation improvements */
.md-nav__item--active > .md-nav__link {
  color: var(--ragprep-primary);
  font-weight: 600;
}

/* Search result highlighting */
.md-search-result__title {
  line-height: 1.4;
}

/* Responsive improvements */
@media screen and (max-width: 768px) {
  .stats-grid {
    grid-template-columns: 1fr;
  }
}
"""
    
    css_file = stylesheets_dir / "extra.css"
    css_file.write_text(custom_css)
    
    print(f"✅ Custom CSS written to {css_file}")
    return css_file


def add_custom_javascript(docs_dir: Path):
    """Add custom JavaScript functionality."""
    
    javascripts_dir = docs_dir / "javascripts"
    javascripts_dir.mkdir(exist_ok=True)
    
    custom_js = """
// Custom JavaScript for RAGPrep Documentation

document.addEventListener('DOMContentLoaded', function() {
    // Initialize quality score formatting
    initQualityScores();
    
    // Initialize document statistics
    initDocumentStats();
    
    // Initialize navigation enhancements
    initNavigationEnhancements();
    
    // Initialize search enhancements
    initSearchEnhancements();
});

function initQualityScores() {
    // Find all quality score elements and format them
    const qualityElements = document.querySelectorAll('[data-quality-score]');
    
    qualityElements.forEach(element => {
        const score = parseFloat(element.dataset.qualityScore);
        let className = 'quality-medium';
        
        if (score >= 0.8) className = 'quality-high';
        else if (score < 0.6) className = 'quality-low';
        
        element.classList.add('quality-score', className);
        
        // Add visual indicator
        const indicator = document.createElement('span');
        indicator.innerHTML = score >= 0.8 ? '●' : score >= 0.6 ? '●' : '●';
        element.prepend(indicator);
    });
}

function initDocumentStats() {
    // Enhance statistics display
    const statCards = document.querySelectorAll('.stat-card');
    
    statCards.forEach(card => {
        // Add hover effects
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    });
}

function initNavigationEnhancements() {
    // Add document type indicators to navigation
    const navLinks = document.querySelectorAll('.md-nav__link');
    
    navLinks.forEach(link => {
        const href = link.getAttribute('href');
        
        if (href && href.includes('original_document')) {
            // Add original document badge
            const badge = document.createElement('span');
            badge.className = 'document-type-badge document-type-original';
            badge.textContent = '📄 Original';
            link.appendChild(badge);
        } else if (href && href.includes('chunk_')) {
            // Add chunk badge
            const badge = document.createElement('span');
            badge.className = 'document-type-badge document-type-chunk';
            badge.textContent = '🔍 Chunk';
            link.appendChild(badge);
        }
    });
}

function initSearchEnhancements() {
    // Enhance search results with document type information
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                const searchResults = document.querySelectorAll('.md-search-result__item');
                
                searchResults.forEach(result => {
                    const link = result.querySelector('.md-search-result__link');
                    if (link && !result.dataset.enhanced) {
                        const href = link.getAttribute('href');
                        
                        if (href) {
                            let badge = '';
                            if (href.includes('original_document')) {
                                badge = '<span class="document-type-badge document-type-original">📄 Original</span>';
                            } else if (href.includes('chunk_')) {
                                badge = '<span class="document-type-badge document-type-chunk">🔍 Chunk</span>';
                            }
                            
                            if (badge) {
                                const title = result.querySelector('.md-search-result__title');
                                if (title) {
                                    title.innerHTML = badge + title.innerHTML;
                                }
                            }
                        }
                        
                        result.dataset.enhanced = 'true';
                    }
                });
            }
        });
    });
    
    const searchContainer = document.querySelector('.md-search__output');
    if (searchContainer) {
        observer.observe(searchContainer, {
            childList: true,
            subtree: true
        });
    }
}

// Utility function to format numbers
function formatNumber(num) {
    return new Intl.NumberFormat().format(num);
}

// Utility function to format quality scores
function formatQualityScore(score) {
    return (score * 100).toFixed(1) + '%';
}
"""
    
    js_file = javascripts_dir / "extra.js"
    js_file.write_text(custom_js)
    
    print(f"✅ Custom JavaScript written to {js_file}")
    return js_file


def update_mkdocs_config_with_assets(mkdocs_dir: Path, css_file: Path, js_file: Path):
    """Update the MkDocs configuration to include custom assets."""
    
    config_file = mkdocs_dir / "mkdocs.yml"
    
    # Read existing config
    with open(config_file, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    # Add custom CSS and JavaScript
    if 'extra_css' not in config:
        config['extra_css'] = []
    if 'extra_javascript' not in config:
        config['extra_javascript'] = []
    
    # Add relative paths to assets
    css_path = css_file.relative_to(mkdocs_dir / "docs")
    js_path = js_file.relative_to(mkdocs_dir / "docs")
    
    config['extra_css'].append(str(css_path))
    config['extra_javascript'].append(str(js_path))
    
    # Write updated config
    with open(config_file, 'w', encoding='utf-8') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
    
    print(f"✅ Updated MkDocs configuration with custom assets")


def main():
    print("🎯 Custom MkDocs Site Configuration Example")
    print("=" * 50)
    
    # Initialize processor
    config = Config()
    processor = DocumentProcessor(config)
    
    # Check if test document exists
    test_doc = Path("../documents/test_document.txt")
    if not test_doc.exists():
        print(f"❌ Test document not found: {test_doc}")
        print("💡 Create a text file to process, or use an existing document")
        return
    
    print(f"📄 Processing document: {test_doc.name}")
    
    # Process document with basic MkDocs export first
    result = processor.process_document_with_mkdocs(
        document_path=str(test_doc),
        export_mkdocs=True,
        build_site=False  # We'll build manually after customization
    )
    
    if not result.success:
        print(f"❌ Processing failed: {result.error_message}")
        return
    
    print("✅ Document processed successfully!")
    
    if 'mkdocs_export' in result.metadata:
        mkdocs_info = result.metadata['mkdocs_export']
        output_dir = Path(mkdocs_info['output_directory'])
        docs_dir = output_dir / "docs"
        
        print(f"\n🎨 Customizing MkDocs site...")
        
        # Create custom configuration
        print("📝 Creating custom MkDocs configuration...")
        create_custom_mkdocs_config(output_dir)
        
        # Add custom CSS
        print("🎨 Adding custom CSS styling...")
        css_file = add_custom_css(docs_dir)
        
        # Add custom JavaScript
        print("⚡ Adding custom JavaScript functionality...")
        js_file = add_custom_javascript(docs_dir)
        
        # Update configuration with assets
        print("🔧 Updating configuration with custom assets...")
        update_mkdocs_config_with_assets(output_dir, css_file, js_file)
        
        # Build the customized site
        print("🏗️  Building customized MkDocs site...")
        
        try:
            import subprocess
            import time
            
            start_time = time.time()
            
            # Build the site
            result = subprocess.run(
                ["python", "-m", "mkdocs", "build", "--clean"],
                cwd=output_dir,
                capture_output=True,
                text=True
            )
            
            build_time = time.time() - start_time
            
            if result.returncode == 0:
                site_dir = output_dir / "site"
                site_url = f"file://{site_dir.absolute()}/index.html"
                
                print(f"✅ Custom site built successfully in {build_time:.2f}s!")
                print(f"📁 Site directory: {site_dir}")
                print(f"🔗 Site URL: {site_url}")
                
                print(f"\n🎨 Custom Features Added:")
                print(f"   🎨 Custom Material Design theme with purple colors")
                print(f"   🌙 Dark/light mode toggle")
                print(f"   📱 Enhanced responsive design")
                print(f"   🏷️  Document type badges (Original/Chunk)")
                print(f"   📊 Quality score indicators")
                print(f"   🔍 Enhanced search with type filtering")
                print(f"   ⚡ Interactive navigation enhancements")
                print(f"   📈 Statistics cards with hover effects")
                print(f"   🎯 Custom CSS and JavaScript")
                
                # Offer to open site
                try:
                    import webbrowser
                    choice = input(f"\n🌍 Open customized site in browser? (y/N): ").strip().lower()
                    if choice in ['y', 'yes']:
                        webbrowser.open(site_url)
                        print("✅ Custom site opened in browser!")
                        
                        print(f"\n💡 Development server:")
                        choice = input(f"Start MkDocs dev server for live editing? (y/N): ").strip().lower()
                        if choice in ['y', 'yes']:
                            print("🚀 Starting development server...")
                            subprocess.run(["python", "-m", "mkdocs", "serve"], cwd=output_dir)
                            
                except:
                    pass
                    
            else:
                print(f"❌ Site build failed:")
                print(result.stderr)
                
        except FileNotFoundError:
            print("❌ MkDocs command not found. Install with: pip install mkdocs mkdocs-material")
        except Exception as e:
            print(f"❌ Error building site: {e}")
    
    else:
        print("❌ MkDocs export information not found")


if __name__ == "__main__":
    main()
